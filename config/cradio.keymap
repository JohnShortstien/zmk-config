// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    compatible = "zmk,keyboard";

    // Define GPIO pins for each key
    key_pins {
        pin_1 = <&gpio0 19>;
        pin_2 = <&gpio0 1>;
        pin_3 = <&gpio0 0>;
        pin_4 = <&gpio0 6>;
        pin_5 = <&gpio0 3>;
        pin_6 = <&gpio0 8>;
        pin_7 = <&gpio0 7>;
        pin_8 = <&gpio0 5>;
        pin_9 = <&gpio0 10>;
        pin_10 = <&gpio0 15>;
        pin_11 = <&gpio0 31>;
        pin_12 = <&gpio0 9>;
        pin_13 = <&gpio0 30>;
        pin_14 = <&gpio0 29>;
        pin_15 = <&gpio0 14>;
        pin_16 = <&gpio0 16>;
        pin_17 = <&gpio0 2>;
    };
};
g
/{
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        // Home row mods macro
        #define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
        #define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4


        // Default Layer
        default_layer {
            bindings = <
                &kp Q   &kp W   &kp E   &kp R   &kp T          &kp Y   &kp U   &kp I   &kp O   &kp P
                &kp A   &kp S   &kp D   &kp F   &kp G          &kp H   &kp J   &kp K   &kp L   &kp SQT
                &kp Z   &kp X   &kp C   &kp V   &kp B          &kp N   &kp M   &kp COMMA   &kp DOT   &kp FSLH
                &lt 2 TAB   &kp ENTER   &kp SPACE  &lt 1 BSPC
            >;
        };

        // Right Layer
        right_layer {
            bindings = <
                &kp INS    &kp N1     &kp N2     &kp N3     &trans         &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &kp COLON
                &kp DEL    &kp N4     &kp N5     &kp N6     &trans         &kp LEFT   &kp DOWN   &kp UP   &kp RIGHT   &kp SEMI
                &caps_word &kp N7     &kp N8     &kp N9     &kp N0         &trans     &trans     &trans     &trans     &trans
                &trans     &kp ESC    &trans     &trans
            >;
        };

        // Left Layer
        left_layer {
            bindings = <
                &trans     &kp LBKT   &kp LBRC   &kp RBRC   &trans         &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT   &kp TILDE
                &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT      &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH   &kp GRAVE
                &trans     &trans     &trans     &trans     &trans         &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE   &trans
                &trans     &trans     &trans     &trans
            >;
        };

        // Tri-Layer (for layer switching and other special behaviors)
        tri_layer {
            bindings = <
                // Base Layer (Layer 0) / Profile 0
                &sys_reset  &trans     &trans     &trans    &bt BT_SEL 0    &trans     &trans     &trans     &trans    &sys_reset
                // Bootloader / Profile 1
                &bootloader &trans     &trans     &trans    &bt BT_SEL 1    &trans     &trans     &trans     &trans    &bootloader
                // Clear Bluetooth / Profile 2
                &trans     &trans     &trans    &bt BT_CLR &bt BT_SEL 2    &trans     &trans     &trans     &trans     &trans
                // Empty spaces for layout symmetry
                &trans     &trans     &trans     &trans
            >;
        };
    };
};

